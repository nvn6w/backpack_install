#!/usr/bin/env bash

########################
# Author: Shinichi Okada
# Date: 2021-05-25
# Backpack for Laravel installer
###########################

# >>>>>>>> default variables >>>>>>>>>>
# set -u
# set defaults
version="0.6.6"
script_name=$(basename "$0")
partial=""
script_dir=""
laravel_dir=$(pwd)
# <<<<<<<< default variables <<<<<<<<<<

# >>>>>>>> argument >>>>>>>>>>>>>>>>>>
usage() {
    cat <<EOF
Name: 
=====
$script_name

Description: 
============
This script install all Backpack for Laravel modules.

Backpackforlaravel modules:
===========================
BackupManager, LogManager, Settings, PageManager, PermissionManager, MenuCrud, and  NewsCrud.

Requirement:
============
You must have Laravel installed and connected to a database.
gsed or sed

Usage:
======
./$script_name [ -d path | --dir path] [ -u | --uninstall ] [ -v | --version ] [ -h | --help ] 
    -d | --dir       Absolute path to Laravel project.          
    -p | --partial    This will install modules one by one.
    -u | --uninstall Uninstall all modules.
    -v | --version   Script version.
    -h | --help      Show help.

Examples:
=========

    # Install all modules at once
    composer create-project laravel/laravel myproject
    cd myproject
    backpack_install

    # Install one by one
    backpack_install -p

    # If you want to set dir
    backpack_install -d /path/to/myproject

    # Uninstall all modules
    backpack_install -u
    # or with -d
    backpack_install -u -d /path/to/laravel/project

    # get help
    backpack_install -h

    # get version
    backpack_install -v
EOF
    exit 2
}

fn_checkDir() {
    if [[ -z $1 ]]; then
        echo "Specify the directory."
        exit 1
    fi
    laravel_dir=$1
    firstChar=${laravel_dir:0:1}
    # echo $laravel_dir
    # echo $firstChar
    if [[ "$firstChar" != "/" ]]; then
        echo "The directory must be an absolute path."
        exit
    fi
    echo "$laravel_dir"
}

while (($# > 0)); do
    case "$1" in
    -d | --dir)
        # echo $2
        laravel_dir=(fn_checkDir "$2")
        shift 2
        ;;
    -v | --version)
        echo "$version"
        exit 0
        ;;
    -p | --partial)
        partial=true
        shift 1
        ;;
    -u | --uninstall)
        uninstall=true
        shift 1
        ;;
    -h | --help | *)
        usage
        exit 0
        ;;
    esac
done

# <<<<<<<< argument <<<<<<<<<<<<<<<<<<

# >>>>>>>> functions >>>>>>>>>>>>>>>>>
# Usage: import "mylib"
# check if $(which backpack_install) is a symlink

fn_script_dir() {
    which_install=$(which backpack_install)

    if [[ -L $which_install ]]; then
        # check if installation is Homebrew
        # if so use script_dir=$(brew --prefix)/Cellar/backpack_install/${version}/bin
        if [[ "$which_install" == *"homebrew"* ]]; then
            script_dir="$(brew --prefix)/Cellar/backpack_install/${version}/bin"
        else
            link=$(realpath "${which_install}")
            script_dir=$(dirname "${link}")
        fi
    else
        script_dir="./"
    fi
    echo $script_dir
}

script_dir=$(fn_script_dir)

fn_check_db_connection() {
    if php artisan migrate:status | grep "Connection refused"; then
        bannerColor "Database not connected. Create a database and update your .env file." "red" "*"
        exit 1
    fi
    bannerColor "DB connected" "blue" "*"
}

fn_confirm() {
    local package=$1
    read -rp "Do you want to install $package? yes/y or no/n   " PANS

    ans=$(echo "$PANS" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")

    echo "$ans"
}

function import() {
    local file="${script_dir}/lib/${1}"
    if [ -f "${file}" ]; then
        # shellcheck disable=SC1090
        source "${file}"
    else
        echo "Error: Cannot find library at: ${file}"
        exit 1
    fi
}
# echo $script_dir
# Usage: import "filename"
import "banners"
import "utils"
import "uninstall"
import "bp_crud"
import "bp_backupmanager"
import "bp_logmanager"
import "bp_settings"
import "bp_pagemanager"
import "bp_permissionmanager"
import "bp_menucrud"
import "bp_newscrud"
import "bp_filemanager"

# <<<<<<<< functions <<<<<<<<<<<<<<<<<

# >>>>>>> event functions >>>>>>>>>>>
# CTRL+C event handler
on_ctrl_c() {
    echo       # Set cursor to the next line of '^C'
    tput cnorm # show cursor. You need this if animation is used.
    bannerColor "Terminated with Ctrl+C." "yellow" "*"
    bannerColor "Removing backpack modules ..." "yellow" "*"
    uninstall_bp "$laravel_dir"
    exit 1 # Don't remove. Use a number (1-255) for error code.
}

# Put this line at the beginning of your script (after functions used by event handlers).
# Register CTRL+C event handler
trap on_ctrl_c SIGINT

# <<<<<<< event functions <<<<<<<<<<<

# >>>>>>> Check >>>>>>>>>>>>>>>>>>>>>
# cd to the project
# echo $laravel_dir
cd "$laravel_dir" || exit 1

if [[ "$uninstall" = true ]]; then
    bannerColor "Uninstalling ..." "red" "*"
    uninstall_bp "$laravel_dir"
fi

# check commands
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    check_cmd sed
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OSX
    check_cmd gsed
fi

check_cmd composer
if ! (("$(laravel_version)" > 7)); then
    echo "Lavel version must be greater than 8." >&2
    exit 1
fi
check_composer
fn_check_db_connection

# <<<<<<< Check <<<<<<<<<<<<<<<<<<<<<

# >>>>>>>> main >>>>>>>>>>>>>>>>>>>>>>>>

if [[ "$partial" = "true" ]]; then
    if [[ $(fn_confirm crud) = "Y" ]]; then
        fn_crud "$laravel_dir"
    fi
    if [[ $(fn_confirm backupmanager) = "Y" ]]; then
        fn_backupmanager "$laravel_dir" "$script_dir"
    fi
    if [[ $(fn_confirm logmanager) = "Y" ]]; then
        fn_logmanager "$laravel_dir" "$script_dir"
    fi
    if [[ $(fn_confirm settings) = "Y" ]]; then
        fn_settings "$laravel_dir"
    fi
    if [[ $(fn_confirm pagemanager) = "Y" ]]; then
        fn_pagemanager "$laravel_dir" "$script_dir"
    fi
    if [[ $(fn_confirm permissionmanager) = "Y" ]]; then
        fn_permissionmanager "$laravel_dir" "$script_dir"
    fi
    if [[ $(fn_confirm menucrud) = "Y" ]]; then
        fn_menucrud "$laravel_dir"
    fi
    if [[ $(fn_confirm newscrud) = "Y" ]]; then
        fn_newscrud "$laravel_dir"
    fi
    if [[ $(fn_confirm filemanager) = "Y" ]]; then
        fn_filemanager "$laravel_dir"
    fi
else
    fn_crud "$laravel_dir" && fn_backupmanager "$laravel_dir" "$script_dir" && fn_logmanager "$laravel_dir" "$script_dir" && fn_settings "$laravel_dir" && fn_pagemanager "$laravel_dir" "$script_dir" && fn_permissionmanager "$laravel_dir" "$script_dir" && fn_menucrud "$laravel_dir" && fn_newscrud "$laravel_dir" && fn_filemanager "$laravel_dir"
fi

echo
bannerColor "Installation completed." "blue" "*"
echo
bannerColor "Happy Coding!" "magenta" "*"
exit 0
